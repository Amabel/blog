<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://blog.amabel.dev/</id><title>Amabel</title><subtitle>Amabel的颈椎病康复指南</subtitle> <updated>2025-08-17T12:27:03+09:00</updated> <author> <name>Weibin Luo</name> <uri>https://blog.amabel.dev/</uri> </author><link rel="self" type="application/atom+xml" href="https://blog.amabel.dev/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://blog.amabel.dev/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2025 Weibin Luo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Claude Code 从入门到实践</title><link href="https://blog.amabel.dev/posts/claude-code-from-beginner-to-practice/" rel="alternate" type="text/html" title="Claude Code 从入门到实践" /><published>2025-08-02T10:30:00+09:00</published> <updated>2025-08-02T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/claude-code-from-beginner-to-practice/</id> <content src="https://blog.amabel.dev/posts/claude-code-from-beginner-to-practice/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> 什么是 Claude Code？ Claude Code 是 Anthropic 开发的命令行工具，让开发者能够在终端中直接与 Claude AI 协作进行编程任务。它不仅是一个聊天工具，更是一个强大的编程助手，能够： 读取和编辑代码文件 执行命令行操作 管理 Git 仓库 安装和配置开发环境 通过 MCP (Model Context Protocol) 扩展功能 Claude Code 的核心价值在于将 AI 助手无缝集成到开发工作流程中，让编程变得更高效。 快速开始 安装 推荐使用 npm 安装： npm install -g @anthropic-ai/claude-code 也可以使用官方安装脚本： curl -fsSL https://install.anthropic.com | sh 首次使用 claude ... </summary> </entry> <entry><title>AWS 基础网络服务实战（一）：使用 Terraform 创建 VPC</title><link href="https://blog.amabel.dev/posts/terraform-vpc/" rel="alternate" type="text/html" title="AWS 基础网络服务实战（一）：使用 Terraform 创建 VPC" /><published>2025-06-06T10:00:00+09:00</published> <updated>2025-06-06T10:00:00+09:00</updated> <id>https://blog.amabel.dev/posts/terraform-vpc/</id> <content src="https://blog.amabel.dev/posts/terraform-vpc/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> VPC 基础与应用场景 在 AWS 上部署服务，第一步就是构建属于自己的网络环境。VPC（Virtual Private Cloud）让你可以像搭积木一样，定制自己的云上网络结构，隔离、管理和保护你的资源。 本文将介绍如何用 Terraform 快速搭建一个自定义 VPC，并给出完整代码和最佳实践。 VPC 的核心概念 CIDR 块：定义网络的 IP 范围，比如 10.0.0.0/16 子网（Subnet）：VPC 内的子网络，通常分为公有和私有 路由表（Route Table）：决定流量如何在子网和外部之间流动 Internet Gateway：让 VPC 内的资源可以访问互联网 NAT Gateway：让私有子网的资源可以访问互联网，但外部无法主动访问它们 一个典型的 VPC 结构，包含公有和私有子网 用 Terraform 创建 V... </summary> </entry> <entry><title>新 Mac 环境配置指南</title><link href="https://blog.amabel.dev/posts/setting-up-new-mac/" rel="alternate" type="text/html" title="新 Mac 环境配置指南" /><published>2024-03-17T10:30:00+09:00</published> <updated>2024-03-17T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/setting-up-new-mac/</id> <content src="https://blog.amabel.dev/posts/setting-up-new-mac/" /> <author> <name>Weibin Luo</name> </author> <summary> 1. 安装 Homebrew 这一步会自动安装 xcode-select，包含了常用的开发工具。 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" 2. 安装常用应用 以下按需安装。 其它软件可在 Homebrew 查找。 brew install --cask iterm2 brew install --cask google-chrome brew install --cask visual-studio-code brew install --cask jetbrains-toolbox brew install --cask rectangle brew install --cask plex brew install -... </summary> </entry> <entry><title>一些关于 GitHub 设定的小技巧</title><link href="https://blog.amabel.dev/posts/tips-of-github-settings/" rel="alternate" type="text/html" title="一些关于 GitHub 设定的小技巧" /><published>2023-10-15T10:30:00+09:00</published> <updated>2023-10-15T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/tips-of-github-settings/</id> <content src="https://blog.amabel.dev/posts/tips-of-github-settings/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> GitHubコマテク集 这篇文章整理了一些关于 GitHub 的设定小技巧，可以用于团队开发中。 </summary> </entry> <entry><title>在 Nginx 的容器中开启 debug 模式</title><link href="https://blog.amabel.dev/posts/nginx-enable-debug-mode/" rel="alternate" type="text/html" title="在 Nginx 的容器中开启 debug 模式" /><published>2023-06-25T10:30:00+09:00</published> <updated>2023-06-25T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/nginx-enable-debug-mode/</id> <content src="https://blog.amabel.dev/posts/nginx-enable-debug-mode/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> 在使用 Nginx 的容器时候，需要开启 debug 日志来进行错误排查。 步骤 1： 使用 nginx-debug 来启动容器 $ docker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g 'daemon off;' 或者当使用 docker compose 时: web: image: nginx volumes: - ./nginx.conf:/etc/nginx/nginx.conf:ro command: [nginx-debug, '-g', 'daemon off;'] 步骤 2： 在配置文件中启用 debug 日志 server { error_log logs/error.log de... </summary> </entry> </feed>
