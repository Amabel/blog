<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://blog.amabel.dev/</id><title>Amabel</title><subtitle>Amabel的小破客</subtitle> <updated>2023-03-24T06:01:29+09:00</updated> <author> <name>Weibin Luo</name> <uri>https://blog.amabel.dev/</uri> </author><link rel="self" type="application/atom+xml" href="https://blog.amabel.dev/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://blog.amabel.dev/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Weibin Luo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>一些 JavaScript 的库的整理</title><link href="https://blog.amabel.dev/posts/awesome-js-libraries/" rel="alternate" type="text/html" title="一些 JavaScript 的库的整理" /><published>2022-12-12T10:30:00+09:00</published> <updated>2022-12-12T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/awesome-js-libraries/</id> <content src="https://blog.amabel.dev/posts/awesome-js-libraries/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> 分享一些开源 JavaScript 库，以及它们的维护情况。 JavaScript Repository Name Keywords Last Updated Note saadeghi/daisyui ui,component 2023/03/21 基于 Tailwind 的 UI 组件库 atomiks/tippyjs ui,tooltip,dropdown 2022/10/30 提示标签 floating-ui/floating-ui ui,anchor 2023/03/23 实现各种组件的定位、... </summary> </entry> <entry><title>味のしない？飴</title><link href="https://blog.amabel.dev/posts/20221105/" rel="alternate" type="text/html" title="味のしない？飴" /><published>2022-11-05T10:30:00+09:00</published> <updated>2022-11-05T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/20221105/</id> <content src="https://blog.amabel.dev/posts/20221105/" /> <author> <name>Weibin Luo</name> </author> <category term="日常" /> <summary> 最近罗森出了一款「没有味道的糖」： 比较感兴趣就想买了试试，没想到连问 8 家罗森都没有卖的， 回头上煤炉搜了一下 惊了。 相关链接 カンロ　味のしない？飴　24g｜ローソン公式サイト </summary> </entry> <entry><title>关于 JWT 的签名和验证</title><link href="https://blog.amabel.dev/posts/introduction-to-json-web-token/" rel="alternate" type="text/html" title="关于 JWT 的签名和验证" /><published>2022-10-16T10:30:00+09:00</published> <updated>2022-10-16T10:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/introduction-to-json-web-token/</id> <content src="https://blog.amabel.dev/posts/introduction-to-json-web-token/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> 介绍 JWT（JSON Web Token）的文章有很多， 这里主要讲一下 JWT 的签名和验证，以及为什么签名是可信的。 由于 JWT 的签名和验证过程比较繁琐，一般情况下不需要自己手动实现。 我们可以通过调用已经封装好的库来轻松验证 JWT 是否有效，以及获取里面的信息。 这里是一些可用的库：JSON Web Token Libraries - jwt.io JWT 签名和验证的过程 首先来看一下 JWT 的结构，下面是一个有效的 JWT： eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c ... </summary> </entry> <entry><title>把 GitHub 的最早提交历史变为 1990 年</title><link href="https://blog.amabel.dev/posts/how-to-make-your-github-history-back-to-1990/" rel="alternate" type="text/html" title="把 GitHub 的最早提交历史变为 1990 年" /><published>2022-10-09T12:00:00+09:00</published> <updated>2022-10-09T12:00:00+09:00</updated> <id>https://blog.amabel.dev/posts/how-to-make-your-github-history-back-to-1990/</id> <content src="https://blog.amabel.dev/posts/how-to-make-your-github-history-back-to-1990/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> 最近发现一个有趣的仓库（GitHub - antfu/1990-script），可以把 GitHub 主页显示的提交历史变成 1990 年。 看起来就像这个样子： GitHub 主页 用法 用法很简单，首先准备好 GitHub 用户名和 Access Token， 然后执行下面的代码： $ sh -c "$(curl -fsSL https://raw.github.com/antfu/1990-script/master/index.sh)" 根据提示输入 GitHub 的用户名和 Access Token 就可以了。 原理 由于 Git 提交时可以使用 GIT_AUTHOR_DATE 和 GIT_COMMITTER_DATE 来手动指定时间 （如果不指定则使用当前时间） 关于 GIT_AUTHOR_DATE 和 GIT_COMMITTER_DATE ... </summary> </entry> <entry><title>用 Storage 来进行前端数据持久化</title><link href="https://blog.amabel.dev/posts/persist-data-to-browser-storage/" rel="alternate" type="text/html" title="用 Storage 来进行前端数据持久化" /><published>2022-09-25T17:30:00+09:00</published> <updated>2022-09-25T17:30:00+09:00</updated> <id>https://blog.amabel.dev/posts/persist-data-to-browser-storage/</id> <content src="https://blog.amabel.dev/posts/persist-data-to-browser-storage/" /> <author> <name>Weibin Luo</name> </author> <category term="技术分享" /> <summary> 为什么要持久化？ 想象一个场景，在一个页面中可以设定主题是深色模式或是浅色模式（就和这个博客左侧菜单下方的按钮一样）。 如果我们不做持久化，那么即使改变了主题颜色，在刷新页面之后由于数据的丢失，又会变回原来的主题。 这对用户来说很不友好。 为了防止数据丢失，我们可以把一些数据（或设定）存入硬盘或内存中， 下次需要的时候直接读取并使用这些数据，就能够达到保存用户的数据（或设定）的目的啦。 怎么持久化？ 在 Web 应用中持久化一般可以分为前端持久化和后端持久化， 前端持久化又有几种方法： Local Storage Session Storage Cookies IndexedDB 今天主要讲一下 Local Storage 和 Session Storage。 Local Storage window.localStorage 中的数据以键值对进... </summary> </entry> </feed>
